import React, {useEffect, useState} from 'react';

import styled from 'styled-components'
import {moneyItem, moneyPurchase} from "../../types/moneyType";
import {useSelector} from "react-redux";
import moneySlice, {currentMonthSelector, currentYearSelector, moneySelector} from "../../pages/Calendar/moneySlice";
import {useAppDispatch} from "../../../store/store";
const Grid = styled.div`
  display: grid;
  grid-template-columns: repeat(6, 196px);
  flex-wrap: wrap;
  grid-gap: 35px;
  padding-right: 31px;
`
const Day = styled.span`
  display: block;
  text-align: center;
  margin-bottom: 25px;
`
const Summ = styled.span`
  display: flex;
  align-items: center;
  padding: 0 30px;
  margin-top: 5px;
`

const Cell = styled.div`
  color: #fff;
  font-size: 14px;
  background: ${props => props.theme.bgLight};
  border-radius: 20px;
  padding: 19px 0;
  cursor: pointer;
`
const SummIcon = styled.svg`
  width: 15px;
  height: 15px;
  margin-right: 8px;
  flex: 0 0 auto;
`
const Market = styled.span`
  overflow: hidden;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  text-align: start;
`
const MarketWrapper = styled.div`
  margin-top: 22px;
`

const CalendarGrid = () => {
    const dispatch = useAppDispatch()
    const money = useSelector(moneySelector) || {}
    const currentMonth = useSelector(currentMonthSelector)
    const currentYear = useSelector(currentYearSelector)
    const date = new Date();
    date.setDate(1)

    const getSumMoney = (money: moneyItem): string => {
        let sum = 0;
        money?.tickets.forEach(ticket => {
            sum += ticket.summ
        })
        money?.purchases.forEach(purchase => {
            sum += purchase.summ * 100
        })
        const strSum = (sum + "").split("")
        return sum ? strSum.splice(0, strSum.length - 2).join("") : "0"
    }

    const getContent = (i: number): JSX.Element => {
        const currentMoney = money[i]
        return (
                <>
                    <Day>Day №{i}</Day>
                    <Summ>
                        <SummIcon>
                            <g clipPath="url(#clip0_1_362)">
                                <path
                                    d="M7.50005 0.300003C3.53015 0.300003 0.300049 3.5301 0.300049 7.5C0.300049 11.4699 3.53015 14.7 7.50005 14.7C11.4699 14.7 14.7 11.4699 14.7 7.5C14.7 3.5301 11.4699 0.300003 7.50005 0.300003ZM7.50005 14.1C3.86075 14.1 0.900049 11.1393 0.900049 7.5C0.900049 3.8607 3.86075 0.900003 7.50005 0.900003C11.1393 0.900003 14.1 3.8607 14.1 7.5C14.1 11.1393 11.1393 14.1 7.50005 14.1Z"
                                    fill="white"/>
                                <path
                                    d="M6.90005 3.9H8.10005C8.92715 3.9 9.60005 4.5729 9.60005 5.4H10.2C10.2 4.242 9.25775 3.3 8.10005 3.3H7.80005V2.4H7.20005V3.3H6.90005C5.74235 3.3 4.80005 4.242 4.80005 5.4V5.7C4.80005 6.858 5.74235 7.8 6.90005 7.8H8.10005C8.92715 7.8 9.60005 8.4729 9.60005 9.3V9.6C9.60005 10.4271 8.92715 11.1 8.10005 11.1H6.90005C6.07295 11.1 5.40005 10.4271 5.40005 9.6H4.80005C4.80005 10.758 5.74235 11.7 6.90005 11.7H7.20005V12.6H7.80005V11.7H8.10005C9.25775 11.7 10.2 10.758 10.2 9.6V9.3C10.2 8.142 9.25775 7.2 8.10005 7.2H6.90005C6.07295 7.2 5.40005 6.5271 5.40005 5.7V5.4C5.40005 4.5729 6.07295 3.9 6.90005 3.9Z"
                                    fill="white"/>
                            </g>
                            <defs>
                                <clipPath id="clip0_1_362">
                                    <rect width="15" height="15" fill="white"/>
                                </clipPath>
                            </defs>
                        </SummIcon>
                        {getSumMoney(currentMoney)} ₽
                    </Summ>
                    <Summ>
                        <SummIcon>
                            <g clipPath="url(#clip0_1_368)">
                                <path
                                    d="M13.1367 5.24062H10.3969L11.1 2.78203C11.2155 2.35019 11.1585 1.89035 10.9408 1.49987C10.7232 1.1094 10.3621 0.818974 9.9341 0.690105C9.50604 0.561234 9.04465 0.604042 8.64762 0.80946C8.25059 1.01488 7.94911 1.36678 7.80703 1.79062L7.29141 3.44297C7.13466 3.94446 6.87994 4.40986 6.54199 4.81219C6.20402 5.21452 5.78958 5.54576 5.32266 5.78672V5.60156C5.32266 5.50833 5.28563 5.41889 5.2197 5.35296C5.15377 5.28703 5.06435 5.25 4.97109 5.25H0.937508C0.844269 5.25 0.754848 5.28703 0.688916 5.35296C0.622986 5.41889 0.585945 5.50833 0.585945 5.60156V14.0625C0.585636 14.1089 0.594502 14.1548 0.612031 14.1978C0.62956 14.2407 0.655407 14.2797 0.688084 14.3126C0.72076 14.3455 0.759622 14.3716 0.802428 14.3894C0.845234 14.4072 0.891144 14.4164 0.937508 14.4164H4.97109C5.06435 14.4164 5.15377 14.3794 5.2197 14.3134C5.28563 14.2475 5.32266 14.1581 5.32266 14.0648V13.8281C6.55758 14.219 7.84533 14.4175 9.14063 14.4164H13.1484C13.4872 14.4164 13.8121 14.2818 14.0517 14.0423C14.2912 13.8027 14.4258 13.4778 14.4258 13.1391V6.51797C14.4255 6.34931 14.3918 6.18239 14.3268 6.02679C14.2618 5.87119 14.1666 5.72998 14.0468 5.61129C13.9271 5.49258 13.785 5.39871 13.6288 5.3351C13.4726 5.27149 13.3054 5.23938 13.1367 5.24062ZM4.61953 13.7133H1.28907V5.94375H4.61953V13.7133ZM13.7109 13.1391C13.7109 13.2914 13.6504 13.4374 13.5428 13.5451C13.4351 13.6528 13.289 13.7133 13.1367 13.7133H9.14063C7.84659 13.7141 6.56105 13.5043 5.33438 13.0922V6.5625C5.95758 6.29686 6.51581 5.89927 6.97059 5.39714C7.42538 4.89502 7.76592 4.30029 7.96875 3.65391L8.48438 2.01328C8.57925 1.78035 8.75707 1.59083 8.98348 1.48131C9.20991 1.37178 9.46887 1.35003 9.71037 1.42024C9.95189 1.49045 10.1588 1.64765 10.2912 1.86149C10.4236 2.07532 10.4721 2.33063 10.4273 2.57812L9.59297 5.49609C9.57813 5.54834 9.5756 5.60332 9.58556 5.65671C9.59552 5.7101 9.61774 5.76047 9.65044 5.80383C9.68313 5.84721 9.72544 5.88241 9.77402 5.90667C9.82261 5.93095 9.87616 5.94366 9.93047 5.94375H13.1367C13.289 5.94375 13.4351 6.00424 13.5428 6.11194C13.6504 6.21961 13.7109 6.36567 13.7109 6.51797V13.1391Z"
                                    fill="url(#paint0_linear_1_368)"/>
                            </g>
                            <defs>
                                <linearGradient id="paint0_linear_1_368" x1="0.585945" y1="7.5" x2="14.4141" y2="7.5"
                                                gradientUnits="userSpaceOnUse">
                                    <stop stopColor="#FF71E6"/>
                                    <stop offset="0.26" stopColor="#F659E7"/>
                                    <stop offset="0.75" stopColor="#E632E8"/>
                                    <stop offset="1" stopColor="#E023E8"/>
                                </linearGradient>
                                <clipPath id="clip0_1_368">
                                    <rect width="15" height="15" fill="white"/>
                                </clipPath>
                            </defs>
                        </SummIcon>
                        {getSumMoney(currentMoney)} ₽
                    </Summ>
                    <Summ>
                        <SummIcon>
                            <path
                                d="M13.5539 3.49219C13.5552 3.47737 13.5552 3.46249 13.5539 3.44766C13.509 2.89041 13.2555 2.37061 12.844 1.99215C12.4325 1.6137 11.8934 1.40446 11.3343 1.40626H6.57417C6.23638 1.40649 5.90315 1.48414 5.60003 1.63325C5.29694 1.78237 5.03207 1.99897 4.82573 2.26642V2.17736C4.82512 1.97263 4.74335 1.77651 4.59836 1.63197C4.4534 1.48743 4.25702 1.40626 4.05229 1.40626H2.21714C2.01282 1.40688 1.81705 1.48832 1.67258 1.63279C1.5281 1.77727 1.44666 1.97304 1.44604 2.17736V9.10547C1.44666 9.3098 1.5281 9.50557 1.67258 9.65004C1.81705 9.79451 2.01282 9.87595 2.21714 9.87656H4.05229C4.25702 9.87659 4.4534 9.7954 4.59836 9.65086C4.74335 9.50632 4.82512 9.31019 4.82573 9.10547V9.01643C5.12877 9.408 5.55475 9.6862 6.0351 9.80625L7.57729 12.9094C7.64952 13.055 7.74988 13.1849 7.87258 13.2915C7.99528 13.3981 8.13787 13.4793 8.29213 13.5305C8.41924 13.5722 8.55213 13.5935 8.68588 13.5938C8.87702 13.5943 9.06564 13.5502 9.23667 13.4649L9.66323 13.2492C9.80899 13.1775 9.93911 13.0775 10.046 12.9551C10.153 12.8328 10.2346 12.6905 10.2862 12.5365C10.3379 12.3824 10.3585 12.2196 10.3469 12.0576C10.3353 11.8955 10.2918 11.7373 10.2187 11.5922L9.37495 9.87656H11.3414C11.9298 9.87595 12.494 9.64191 12.9101 9.2258C13.3262 8.80969 13.5603 8.2455 13.5609 7.65703V3.62344C13.5609 3.58828 13.5609 3.55312 13.5609 3.51797C13.5596 3.50913 13.5573 3.50046 13.5539 3.49219ZM4.35698 9.11721C4.35637 9.1976 4.324 9.2745 4.26691 9.33113C4.20984 9.38777 4.1327 9.41955 4.05229 9.41953H2.21714C2.13695 9.41953 2.06005 9.38768 2.00335 9.33098C1.94665 9.27429 1.91479 9.19739 1.91479 9.11721V2.17736C1.91479 2.09717 1.94665 2.02027 2.00335 1.96357C2.06005 1.90687 2.13695 1.87501 2.21714 1.87501H4.05229C4.1327 1.87501 4.20984 1.90679 4.26691 1.96342C4.324 2.02006 4.35637 2.09695 4.35698 2.17736V9.10547V9.11721ZM11.3343 9.41953H8.99057C8.97496 9.41843 8.95931 9.41843 8.9437 9.41953H8.89916C8.88885 9.42523 8.87938 9.43233 8.87104 9.44062C8.85679 9.44946 8.84345 9.45966 8.8312 9.47109C8.82255 9.48307 8.81472 9.49559 8.80776 9.50859C8.79859 9.52022 8.79074 9.53278 8.78432 9.54609C8.78301 9.56327 8.78301 9.5805 8.78432 9.59768C8.78301 9.60855 8.78301 9.61959 8.78432 9.63047C8.78214 9.64523 8.78214 9.66026 8.78432 9.675C8.78573 9.6904 8.78969 9.70547 8.79604 9.71955L9.81791 11.775C9.90874 11.9571 9.9239 12.1677 9.8601 12.361C9.82783 12.4569 9.77681 12.5454 9.71003 12.6215C9.64324 12.6975 9.562 12.7595 9.47104 12.8039L9.04448 13.0195C8.95436 13.0647 8.85613 13.0916 8.75552 13.0984C8.65492 13.1052 8.55395 13.092 8.45854 13.0594C8.36268 13.0284 8.27404 12.9783 8.19794 12.9123C8.12181 12.8463 8.0598 12.7656 8.01557 12.675L6.42182 9.47344V9.46172C6.41374 9.44831 6.40431 9.43575 6.3937 9.42422L6.32807 9.41953C6.31558 9.41112 6.30222 9.40406 6.28823 9.39844L6.25541 9.375H6.24135C5.8447 9.29494 5.48795 9.08013 5.23164 8.76698C4.97533 8.45386 4.83522 8.0617 4.8351 7.65703V3.62344C4.83571 3.16153 5.01883 2.71859 5.34456 2.39109C5.67032 2.0636 6.11228 1.8781 6.57417 1.87501H11.3343C11.7346 1.87518 12.1228 2.01252 12.4341 2.26414C12.7454 2.51576 12.9611 2.86648 13.0453 3.25781H11.2031C11.1409 3.25781 11.0813 3.28252 11.0373 3.32646C10.9934 3.37043 10.9687 3.43003 10.9687 3.49219C10.9687 3.55437 10.9934 3.61397 11.0373 3.65794C11.0813 3.70188 11.1409 3.72656 11.2031 3.72656H13.0781V5.24065H11.2031C11.1409 5.24065 11.0813 5.26533 11.0373 5.30927C10.9934 5.35324 10.9687 5.41284 10.9687 5.47502C10.9687 5.53718 10.9934 5.59678 11.0373 5.64075C11.0813 5.6847 11.1409 5.7094 11.2031 5.7094H13.0781V7.22578H11.2031C11.1409 7.22578 11.0813 7.25048 11.0373 7.29443C10.9934 7.3384 10.9687 7.398 10.9687 7.46016C10.9687 7.52234 10.9934 7.58194 11.0373 7.62591C11.0813 7.66985 11.1409 7.69455 11.2031 7.69455H13.0781C13.0683 8.15114 12.8805 8.58584 12.5547 8.9059C12.229 9.22598 11.791 9.4061 11.3343 9.40781V9.41953Z"
                                fill="white"/>
                        </SummIcon>
                        {getSumMoney(currentMoney)} ₽
                    </Summ>
                    <MarketWrapper>
                        <Summ>
                            <SummIcon>
                                <g clipPath="url(#clip0_1_370)">
                                    <path
                                        d="M12.1875 12.4805C12.0258 12.4805 11.8945 12.6117 11.8945 12.7734C11.8945 12.9352 12.0258 13.0664 12.1875 13.0664C12.3492 13.0664 12.4805 12.9352 12.4805 12.7734C12.4805 12.6117 12.3492 12.4805 12.1875 12.4805Z"
                                        fill="white"/>
                                    <path
                                        d="M13.0664 1.38961V0.878906C13.0664 0.394277 12.6721 0 12.1875 0H2.8125C2.32787 0 1.93359 0.394277 1.93359 0.878906V1.38961C0.0226466 4.91883 8.78906e-05 4.81403 0 4.98015C0 4.98026 0 4.98035 0 4.98047V5.56641C0 6.07421 0.293613 6.54647 0.761719 6.81504V14.707C0.761719 14.8688 0.89291 15 1.05469 15H13.9453C14.1071 15 14.2383 14.8688 14.2383 14.707V6.81504C14.7017 6.54671 15 6.06888 15 5.56641V4.98047C15 4.98035 15 4.98026 15 4.98015C14.9999 4.81225 14.9587 4.8844 13.0664 1.38961ZM14.2116 4.6875H12.3987L11.4221 1.75781H12.6002L14.2116 4.6875ZM10.1367 5.27344H11.8945V5.56641C11.8945 6.05103 11.5003 6.44531 11.0156 6.44531C10.531 6.44531 10.1367 6.05103 10.1367 5.56641V5.27344ZM10.0919 4.6875L9.60366 1.75781H10.8045L11.781 4.6875H10.0919ZM2.51953 0.878906C2.51953 0.717363 2.65096 0.585938 2.8125 0.585938H12.1875C12.349 0.585938 12.4805 0.717363 12.4805 0.878906V1.17188C12.2015 1.17188 2.80066 1.17188 2.51953 1.17188V0.878906ZM9.55078 5.27344V5.56641C9.55078 6.05103 9.1565 6.44531 8.67188 6.44531C8.18725 6.44531 7.79297 6.05103 7.79297 5.56641V5.27344H9.55078ZM7.79297 4.6875V1.75781H9.00964L9.49793 4.6875H7.79297ZM5.5021 4.6875L5.99039 1.75781H7.20703V4.6875H5.5021ZM7.20703 5.27344V5.56641C7.20703 6.05103 6.81275 6.44531 6.32812 6.44531C5.8435 6.44531 5.44922 6.05103 5.44922 5.56641V5.27344H7.20703ZM3.21896 4.6875L4.19552 1.75781H5.39634L4.90805 4.6875H3.21896ZM4.86328 5.27344V5.56641C4.86328 6.05103 4.469 6.44531 3.98438 6.44531C3.49975 6.44531 3.10547 6.05103 3.10547 5.56641V5.27344H4.86328ZM2.39977 1.75781H3.57788L2.60133 4.6875H0.788438L2.39977 1.75781ZM0.585938 5.56641V5.27344H2.51953V5.56641C2.51953 6.0264 2.05872 6.44531 1.55273 6.44531C1.42518 6.44531 1.29299 6.41763 1.16994 6.36498C0.820635 6.21642 0.585938 5.89547 0.585938 5.56641ZM6.03516 14.4141H3.10547V11.8945H6.03516V14.4141ZM6.03516 11.3086H3.10547V8.78906H6.03516V11.3086ZM13.6523 14.4141H6.62109V8.49609C6.62109 8.33432 6.4899 8.20312 6.32812 8.20312H2.8125C2.65072 8.20312 2.51953 8.33432 2.51953 8.49609V14.4141H1.34766V7.01692C1.41557 7.02615 1.48397 7.03125 1.55273 7.03125C1.93831 7.03125 2.32808 6.8785 2.62201 6.61213C2.68702 6.55324 2.74556 6.49025 2.79809 6.42425C3.06451 6.79166 3.49688 7.03125 3.98438 7.03125C4.46306 7.03125 4.88877 6.80045 5.15625 6.44429C5.42373 6.80045 5.84944 7.03125 6.32812 7.03125C6.80681 7.03125 7.23252 6.80045 7.5 6.44429C7.76748 6.80045 8.19319 7.03125 8.67188 7.03125C9.15056 7.03125 9.57627 6.80045 9.84375 6.44429C10.1112 6.80045 10.5369 7.03125 11.0156 7.03125C11.5031 7.03125 11.9355 6.79166 12.2019 6.42425C12.2544 6.49025 12.313 6.55321 12.378 6.61213C12.6719 6.8785 13.0617 7.03125 13.4473 7.03125C13.5159 7.03125 13.5843 7.02633 13.6523 7.01704V14.4141ZM14.4141 5.56641C14.4141 5.90473 14.1706 6.22937 13.8084 6.37427C13.6899 6.42144 13.5684 6.44531 13.4473 6.44531C12.9413 6.44531 12.4805 6.0264 12.4805 5.56641V5.27344H14.4141V5.56641Z"
                                        fill="white"/>
                                    <path
                                        d="M12.7734 11.3086H12.4805V8.49609C12.4805 8.33432 12.3493 8.20312 12.1875 8.20312H8.67188C8.5101 8.20312 8.37891 8.33432 8.37891 8.49609V11.3086H8.08594C7.92416 11.3086 7.79297 11.4398 7.79297 11.6016C7.79297 11.7633 7.92416 11.8945 8.08594 11.8945H12.7734C12.9352 11.8945 13.0664 11.7633 13.0664 11.6016C13.0664 11.4398 12.9352 11.3086 12.7734 11.3086ZM11.8945 11.3086H8.96484V8.78906H11.8945V11.3086Z"
                                        fill="white"/>
                                    <path
                                        d="M11.0156 12.4805H8.67188C8.5101 12.4805 8.37891 12.6117 8.37891 12.7734C8.37891 12.9352 8.5101 13.0664 8.67188 13.0664H11.0156C11.1774 13.0664 11.3086 12.9352 11.3086 12.7734C11.3086 12.6117 11.1774 12.4805 11.0156 12.4805Z"
                                        fill="white"/>
                                </g>
                                <defs>
                                    <clipPath id="clip0_1_370">
                                        <rect width="15" height="15" fill="white"/>
                                    </clipPath>
                                </defs>
                            </SummIcon>
                            <Market>{currentMoney?.tickets?.length ? currentMoney?.tickets[0]?.market : "Украинский секс-шоп"}</Market>
                        </Summ>
                    </MarketWrapper>
                </>
        )
    }

    const getCell = (i: number): JSX.Element => {
        return (
            <Cell key={i} onClick={() => dispatch(moneySlice.actions.changeFocusedDay(i))}>
                {getContent(i)}
            </Cell>
        )
    }

    const getGrid = (): JSX.Element[] => {
        const cells = []
        const date = new Date(currentYear,currentMonth, 1)
        let i = 1
        while (true) {
            date.setDate(i)
            if (currentMonth !== date.getMonth()) {
                break
            }
            cells.push(getCell(i))
            i++
        }
        return cells
    }

    return (
        <Grid>
            {getGrid()}
        </Grid>
    )
}

export default CalendarGrid;
